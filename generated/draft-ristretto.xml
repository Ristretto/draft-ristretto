<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="info" docName="draft-ristretto-00">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=""?>
<?rfc topblock="yes"?>
<?rfc comments="no"?>
<front>
<title abbrev="Ristretto">The Ristretto Elliptic Curve Groups</title>

<author role="editor" initials="Dr. " surname="Who" fullname="Peter Wilton Cushing">
<organization>The Timelords</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>drwho@bbc.co.uk</email>
<uri></uri>
</address>
</author>
<author role="editor" initials="D.A.V.R.O.S." surname="Davros" fullname="Michael Wisher">
<organization>Imperial Daleks</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>davros@dalek.rs</email>
<uri></uri>
</address>
</author>
<date year="2018" month="July" day="25"/>

<area>Internet</area>
<workgroup></workgroup>


<abstract>
<t>This memo specifies two elliptic curves groups of prime order with
a high level of practical security in cryptographic applications.
These elliptic curve groups are intended to operate at the ~128-bit
and ~224-bit security level, respectively, and supplement the existing
elliptic curve groups specified in <xref target="RFC7748"/>.
</t>
</abstract>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t><spanx style="strong">Ristretto</spanx> is a technique for constructing prime order elliptic curve groups
with non-malleable encodings. It extends the <eref target="https://eprint.iacr.org/2015/673.pdf">Decaf</eref> approach to cofactor
elimination to support cofactor-\(8\) curves such as Curve25519.
</t>
<t>In particular, this allows an existing Curve25519 library to implement a
prime-order group with only a thin abstraction layer, and makes it possible
for systems using Ed25519 signatures to be safely extended with zero-knowledge
protocols, with <spanx style="strong">no additional cryptographic assumptions</spanx> and <spanx style="strong">minimal code
changes</spanx>.
</t>
<t>Ristretto can be used in conjunction with Edwards curves with cofactor \(4\)
or \(8\), and provides the following specific parameter choices:
</t>
<t>
<list style="symbols">
<t><spanx style="verb">ristretto255</spanx>: Ristretto group for Curve25519;</t>
<t><spanx style="verb">ristretto448</spanx>: Ristretto group for Ed448-Goldilocks.</t>
</list>
</t>

<section anchor="conventions-used-in-this-document" title="Conventions Used in This Document">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
interpreted as described in <xref target="RFC2119"/>.
</t>
</section>
</section>

<section anchor="background" title="Background">
<t>Many cryptographic protocols require an implementation of a group of prime
order \( \ell \), usually an elliptic curve group.  However, modern elliptic curve
implementations with fast, simple formulas don't provide a prime-order group.
Instead, they provide a group of order \(h \cdot \ell \) for a small cofactor,
usually \( h = 4 \) or \( h = 8\).
</t>
<t>In many existing protocols, the complexity of managing this abstraction is
pushed up the stack via ad-hoc protocol modifications.  But these modifications
are a recurring source of vulnerabilities and subtle design complications, and
they usually prevent applying the security proofs of the abstract protocol.
</t>
<t>On the other hand, prime-order curves provide the correct abstraction, but
their formulas are slower and more difficult to implement in constant time.  A
clean solution to this dilemma is Mike Hamburg's <eref target="https://eprint.iacr.org/2015/673.pdf">Decaf proposal</eref>,
which shows how to use a cofactor-\(4\) curve to provide a prime-order group
– with no additional cost.
</t>
<t>This provides the best of both choices: the correct abstraction required to
implement complex protocols, and the simplicity, efficiency, and speed of a
non-prime-order curve.  However, many systems use Curve25519, which has
cofactor \(8\), not cofactor \(4\).
</t>
<t><spanx style="strong">Ristretto</spanx> is a variant of Decaf designed for compatibility with
cofactor-\(8\) curves, such as Curve25519.  It is particularly well-suited
for extending systems using Ed25519 signatures with complex zero-knowledge
protocols.
</t>

<section anchor="pitfalls-of-a-cofactor" title="Pitfalls of a cofactor">
<t>Curve cofactors have caused several vulnerabilities in higher-layer protocol
implementations.  The abstraction mismatch can also have subtle consequences for
programs using these cryptographic protocols, as design quirks in the protocol
bubble up—possibly even to the UX level.
</t>
<t>The malleability in Ed25519 signatures
<eref target="https://moderncrypto.org/mail-archive/curves/2017/000898.html">caused a double-spend vulnerability</eref>—or, technically, octuple-spend as
\( h = 8\)—in the CryptoNote scheme used by the Monero cryptocurrency, where
the adversary could add a low-order point to an existing transaction, producing
a new, seemingly-valid transaction.
</t>
<t>In Tor, Ed25519 public key malleability would mean that every v3 onion service
has eight different addresses, causing mismatches with user expectations and
potential gotchas for service operators.  Fixing this required
<eref target="https://trac.torproject.org/projects/tor/ticket/22006#comment:13">expensive runtime checks</eref> in the v3 onion services protocol,
requiring a full scalar multiplication, point compression, and equality check.
This check <eref target="https://github.com/torproject/tor/search?q=hs_address_is_valid&amp;unscoped_q=hs_address_is_valid">must be called in several places</eref> to validate
that the onion service's key does not contain a small torsion component.
</t>
</section>

<section anchor="disadvantages-of-multiplying-by-the-cofactor" title="Disadvantages of multiplying by the cofactor">
<t>In some protocols, designers can specify appropriate places to multiply by the
cofactor \(h\) to &quot;fix&quot; the abstraction mismatches; in others, it's unfeasible
or impossible.  In any case, multiplying by the cofactor often means that
security proofs are not cleanly applicable.
</t>
<t>As touched upon earlier, a curve point consists of an \( h \)-torsion
component and an \( \ell \)-torsion component.  Multiplying by the cofactor is
frequently referred to as &quot;clearing&quot; the low-order component, however doing so
affects the \( \ell \)-torsion component, effectively mangling the point.
While this works for some cases, it is not a validation method.
To validate that a point is in the prime-order subgroup, one can alternately
multiply by \( \ell \) and check that the result is
the identity.  But this is extremely expensive.
</t>
<t>Another option is to mandate that all scalars have particular bit patterns, as
in X25519 and Ed25519.  However, this means that scalars are no longer
well-defined \( \mathrm{mod} \ell \), which makes HKD schemes
<eref target="https://moderncrypto.org/mail-archive/curves/2017/000858.html">much more complicated</eref>.  Yet another approach is to
choose a <eref target="https://moderncrypto.org/mail-archive/curves/2017/000866.html">torsion-safe representative</eref>:
an integer which is \( 0 \mathrm{mod} h \) and with a particular value \(
\mathrm{mod} \ell \), so that scalar multiplications remove the low-order
component.  But these representatives are a few bits too large to be used with
existing implementations, and in any case aren't a comprehensive
solution.
</t>
</section>
</section>

<section anchor="definition" title="Definition">
<t>Ristretto is a construction of a prime-order group using a non-prime-order
Edwards curve.
</t>
<t>The Decaf paper suggests using a non-prime-order curve \(\mathcal E\) to
implement a prime-order group by constructing a quotient group.  Ristretto uses
the same idea, but with different formulas, in order to allow the use of
cofactor-\(8\) curves such as Curve25519.
</t>
<t>Internally, a Ristretto point is represented by an Edwards point.  Two Edwards
points \(P, Q\) may represent the same Ristretto point, in the same way that
different projective \( X, Y, Z \) coordinates may represent the same Edwards
point.  Group operations on Ristretto points are carried out with no overhead
by performing the operations on the representative Edwards points.
</t>
<t>To do this, Ristretto defines:
</t>
<t>
<list style="numbers">
<t>a new type for Ristretto points which contains the representative
Edwards point;</t>
<t>equality on Ristretto points so that all equivalent
representatives are considered equal;</t>
<t>an encoding function on Ristretto points so that all equivalent
representatives are encoded as identical bitstrings;</t>
<t>a decoding function on bitstrings with built-in validation, so that only the
canonical encodings of valid points are accepted;</t>
<t>a map from bitstrings to Ristretto points suitable for hash-to-point
operations.</t>
</list>
</t>
<t>In other words, an existing Edwards curve implementation can implement the
correct abstraction for complex protocols just by adding a new type and three
or four functions.  Moreover, equality checking for the Ristretto group is
actually less expensive than equality checking for the underlying curve.
</t>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7748.xml"?>
</references>

</back>
</rfc>
